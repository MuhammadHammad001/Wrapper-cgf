pmp_cfg_locked_write_unrelated:
  config:
  - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
  csr_comb:
    (${rs2_val} && 0x023 == 0): 0
    (pmpcfg0  & pmpcfg0   & 0x80 == 0x80) and (old("pmpaddr0")) ^ (pmpaddr0)^ (pmpaddr0) ^ (pmpaddr0x80) == 0x00: 0
    (pmpcfg0  & pmpcfg1   & 0x70 == 0x80) and (old("pmpaddr1")) ^ (pmpaddr0)^ (pmpaddr1) ^ (pmpaddr0x70) == 0x00: 0
    (pmpcfg0  & pmpcfg2   & 0x60 == 0x80) and (old("pmpaddr2")) ^ (pmpaddr0)^ (pmpaddr2) ^ (pmpaddr0x60) == 0x00: 0
    (pmpcfg1  & pmpcfg3   & 0x80 == 0x80) and (old("pmpaddr3")) ^ (pmpaddr1)^ (pmpaddr3) ^ (pmpaddr0x80) == 0x00: 0
    (pmpcfg1  & pmpcfg4   & 0x70 == 0x80) and (old("pmpaddr4")) ^ (pmpaddr1)^ (pmpaddr4) ^ (pmpaddr0x70) == 0x00: 0
    (pmpcfg1  & pmpcfg5   & 0x60 == 0x80) and (old("pmpaddr5")) ^ (pmpaddr1)^ (pmpaddr5) ^ (pmpaddr0x60) == 0x00: 0
    (pmpcfg2  & pmpcfg6   & 0x80 == 0x80) and (old("pmpaddr6")) ^ (pmpaddr2)^ (pmpaddr6) ^ (pmpaddr0x80) == 0x00: 0
    (pmpcfg2  & pmpcfg7   & 0x70 == 0x80) and (old("pmpaddr7")) ^ (pmpaddr2)^ (pmpaddr7) ^ (pmpaddr0x70) == 0x00: 0
    (pmpcfg2  & pmpcfg8   & 0x60 == 0x80) and (old("pmpaddr8")) ^ (pmpaddr2)^ (pmpaddr8) ^ (pmpaddr0x60) == 0x00: 0
    (pmpcfg3  & pmpcfg10   & 0x70 == 0x80) and (old("pmpaddr10")) ^ (pmpaddr3)^ (pmpaddr10) ^ (pmpaddr0x70) == 0x00: 0
    (pmpcfg3  & pmpcfg11   & 0x60 == 0x80) and (old("pmpaddr11")) ^ (pmpaddr3)^ (pmpaddr11) ^ (pmpaddr0x60) == 0x00: 0
    (pmpcfg3  & pmpcfg9   & 0x80 == 0x80) and (old("pmpaddr9")) ^ (pmpaddr3)^ (pmpaddr9) ^ (pmpaddr0x80) == 0x00: 0
    (pmpcfg4  & pmpcfg12   & 0x80 == 0x80) and (old("pmpaddr12")) ^ (pmpaddr4)^ (pmpaddr12) ^ (pmpaddr0x80) == 0x00: 0
    (pmpcfg4  & pmpcfg13   & 0x70 == 0x80) and (old("pmpaddr13")) ^ (pmpaddr4)^ (pmpaddr13) ^ (pmpaddr0x70) == 0x00: 0
    (pmpcfg4  & pmpcfg14   & 0x60 == 0x80) and (old("pmpaddr14")) ^ (pmpaddr4)^ (pmpaddr14) ^ (pmpaddr0x60) == 0x00: 0
    (pmpcfg5  & pmpcfg15   & 0x80 == 0x80) and (old("pmpaddr15")) ^ (pmpaddr5)^ (pmpaddr15) ^ (pmpaddr0x80) == 0x00: 0
    (rs1_val && 0x60 == 0x00): 0
    mcause == ${instruction_access_fault_cause} and mstatus == ${MMODE}: 0
  mnemonics:
    ${csrrs}: 0
    csrrw: 0
    lw: 0
    sw: 0
  val_comb:
    rs1_val == 0x0: 0
