*- Write to pmpcfg with L=1 and check that:
# *- Writes are ignored
# *- Writes to other, unrelated entries in the same CSR are not ignored"
pmp_cfg_locked_write_unrelated:
# ****future work****
# **** add a way to define constants, e.g. #define _mpp_mask 0x1800, _byte_msk 0xFF, 
# **** add a way to expand ranges so you can replicate lines, 
#      e.g. pmpcfg[0..15] in a line would replicate the line 16 time with values pmpaddr0..pmpaddr[15]
#       or an enumeration [x,y,z], etc (extra points for complex ennumerations, [0,4..6]****    
#          or explicitly define a loop, and be able to substitute the induction variable
#       also, be able to reuse it, so if you define pmpcfg[0..15],  you can refer to it again in the same line as [_1] (not needed if using loop approach)  ****
# **** be able to us _1 in an arithmetic expression if it is number ****
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
  csr_comb:

    #define pmpcfgmsk 0xFF
    #define pmplckmsk 0x80
    (old("pmpcfg{ 0..15}") ^ pmpcfg$1)  & ((pmpcfgmsk<<{0..3}<<3) == 0x00) and (pmpcfg$1      & (pmplckmsk<<$2           !=0 : 0 #make sure writes are ignored if lockbit=1
    (old("pmpaddr{0..63}" == pmpaddr$1)                                    and (pmpcfg{$1>>2} & (pmplckmsk<<{($1&3)<<3}) !=0 : 0 #make sure writes are ignored if lockbit=1

# *So, evaluate things in curly braces and remove the braces, but if there are more than value (e.g a range 0..n or enum x,y,z), then  repeat again until you run out of values
# "$n" notation refers to the value calculated within the n-th set of curly braces found
# If there are more than 1 set of clurly braces that have more than value, it acts like a nested loop, and you don't advance to the next value inside the curly braces until this set has be 

    (pmpcfg0     & 0x80 == 0x80) and (old("pmpcfg0") & (0xFF   ))  ^ (pmpcfg0 & (0xFF    )) == 0x00: 0   #any other write ignored
    (pmpcfg0>>8  & 0x80 == 0x80) and (old("pmpcfg0") & (0xFF<<8))  ^ (pmpcfg0 & (0xFF<<8 )) == 0x00: 0   #any other write ignored
    (pmpcfg0>>16 & 0x80 == 0x80) and (old("pmpcfg0") & (0xFF<<16)) ^ (pmpcfg0 & (0xFF<<16)) == 0x00: 0   #any other write ignored
    (pmpcfg0>>24 & 0x80 == 0x80) and (old("pmpcfg0") & (0xFF<<24)) ^ (pmpcfg0 & (0xFF<<24)) == 0x00: 0   #any other write ignored
    (pmpcfg0    & 0x80 == 0x80) and (old("pmpaddr0")) ^ (pmpaddr0) == 0x00: 0   #any other write ignored
    (pmpcfg0>>8 & 0x80 == 0x80) and (old("pmpaddr1")) ^ (pmpaddr1) == 0x00: 0   #any other write ignored
    (pmpcfg0>>16 & 0x80 == 0x80) and (old("pmpaddr2")) ^ (pmpaddr2) == 0x00: 0   #any other write ignored
    (pmpcfg0>>24 & 0x80 == 0x80) and (old("pmpaddr3")) ^ (pmpaddr3) == 0x00: 0   #any other write ignored
    (pmpcfg1    & 0x80 == 0x80) and (old("pmpcfg1") & 0xFF) ^ (pmpcfg1 & 0xFF) == 0x00: 0   #any other write ignored
    (pmpcfg1    & 0x80 == 0x80) and (old("pmpaddr4")) ^ (pmpaddr4) == 0x00: 0   #any other write ignored
    (pmpcfg1>>8 & 0x80 == 0x80) and (old("pmpcfg1") & (0xFF<<8)) ^ (pmpcfg1 & (0xFF<<8)) == 0x00: 0   #any other write ignored
    (pmpcfg1>>8 & 0x80 == 0x80) and (old("pmpaddr5")) ^ (pmpaddr5) == 0x00: 0   #any other write ignored
    (pmpcfg1>>16 & 0x80 == 0x80) and (old("pmpcfg1") & (0xFF<<16)) ^ (pmpcfg1 & (0xFF<<16)) == 0x00: 0   #any other write ignored
    (pmpcfg1>>16 & 0x80 == 0x80) and (old("pmpaddr6")) ^ (pmpaddr6) == 0x00: 0   #any other write ignored
    (pmpcfg1>>24 & 0x80 == 0x80) and (old("pmpcfg1") & (0xFF<<24)) ^ (pmpcfg1 & (0xFF<<24)) == 0x00: 0   #any other write ignored
    (pmpcfg1>>24 & 0x80 == 0x80) and (old("pmpaddr7")) ^ (pmpaddr7) == 0x00: 0   #any other write ignored
    (pmpcfg2    & 0x80 == 0x80) and (old("pmpcfg2") & 0xFF) ^ (pmpcfg2 & 0xFF) == 0x00: 0   #any other write ignored
    (pmpcfg2    & 0x80 == 0x80) and (old("pmpaddr8")) ^ (pmpaddr8) == 0x00: 0   #any other write ignored
    (pmpcfg2>>8 & 0x80 == 0x80) and (old("pmpcfg2") & (0xFF<<8)) ^ (pmpcfg2 & (0xFF<<8)) == 0x00: 0   #any other write ignored
    (pmpcfg2>>8 & 0x80 == 0x80) and (old("pmpaddr9")) ^ (pmpaddr9) == 0x00: 0   #any other write ignored
    (pmpcfg2>>16 & 0x80 == 0x80) and (old("pmpcfg2") & (0xFF<<16)) ^ (pmpcfg2 & (0xFF<<16)) == 0x00: 0   #any other write ignored
    (pmpcfg2>>16 & 0x80 == 0x80) and (old("pmpaddr10")) ^ (pmpaddr10) == 0x00: 0   #any other write ignored
    (pmpcfg2>>24 & 0x80 == 0x80) and (old("pmpcfg2") & (0xFF<<24)) ^ (pmpcfg2 & (0xFF<<24)) == 0x00: 0   #any other write ignored
    (pmpcfg2>>24 & 0x80 == 0x80) and (old("pmpaddr11")) ^ (pmpaddr11) == 0x00: 0   #any other write ignored
    (pmpcfg3    & 0x80 == 0x80) and (old("pmpcfg3") & 0xFF) ^ (pmpcfg3 & 0xFF) == 0x00: 0   #any other write ignored
    (pmpcfg3    & 0x80 == 0x80) and (old("pmpaddr12")) ^ (pmpaddr12) == 0x00: 0   #any other write ignored
    (pmpcfg3>>8 & 0x80 == 0x80) and (old("pmpcfg3") & (0xFF<<8)) ^ (pmpcfg3 & (0xFF<<8)) == 0x00: 0   #any other write ignored
    (pmpcfg3>>8 & 0x80 == 0x80) and (old("pmpaddr13")) ^ (pmpaddr13) == 0x00: 0   #any other write ignored
    (pmpcfg3>>16 & 0x80 == 0x80) and (old("pmpcfg3") & (0xFF<<16)) ^ (pmpcfg3 & (0xFF<<16)) == 0x00: 0   #any other write ignored
    (pmpcfg3>>16 & 0x80 == 0x80) and (old("pmpaddr14")) ^ (pmpaddr14) == 0x00: 0   #any other write ignored
    (pmpcfg3>>24 & 0x80 == 0x80) and (old("pmpcfg3") & (0xFF<<24)) ^ (pmpcfg3 & (0xFF<<24)) == 0x00: 0   #any other write ignored
    (pmpcfg3>>24 & 0x80 == 0x80) and (old("pmpaddr15")) ^ (pmpaddr15) == 0x00: 0   #any other write ignored
# #------------------------------------------------------------------------------
# #PMP Permission. Check csrrw. csrrs and csrrc in all 3 modes
# # *No exception in Machine mode
# # *Page 57 -- pmp csrs accessible only in M mode. So, exception in Supervisor mode  !!!! should also check umode !!!!
# # *Page 57 -- pmp csrs accessible only in M mode. So, exception in User mode
pmp_access_permission:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw : 0
    csrrs : 0
    sw    : 0
  csr_comb: #**** USE NEW "mode" function ****
    (mstatus & 0x1800 != 0x0800) and ((old("pmpcfg0")) ^ (pmpcfg0) != 0x00): 0   #any other write ignored
    (mstatus & 0x1800 != 0x0800) and ((old("pmpaddr0")) ^ (pmpaddr0) != 0x00): 0   #any other write ignored

    'mstatus & 0x1800 == 0x0800 and (read_csr("mcause") == 0x00000002)' : 0 #Start of mtrap_sigptr
    'mstatus & 0x1800 == 0x0000 and (read_csr("mcause") == 0x00000002)' : 0 #Start of mtrap_sigptr
should be (mstatus & 0x1000 != 0x0000) or (mstatus & usmodemsk != 0x0000)
    (mstatus & usmodeMsk != usmodeVal) and ((old("pmpcfg0"))  ^ (pmpcfg0)  != 0x00): 0   #write succeeds only !smode (umode should trap)?? can't catch umode writing PMP bug

    (mstatus & modeMsk) and ((old("pmpaddr0")) ^ (pmpaddr0) != 0x00): 0   #any other write ignored
    'mstatus & modeMsk) == smodeVal and (read_csr("mcause") == illop)' : 0 #Start of mtrap_sigptr
    'mstatus & modeMsk) == umodeVal and (read_csr("mcause") == illop)' : 0 #Start of mtrap_sigptr


pmp_NA4_RWX:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:	
    csrrw: 0			#*for _i = [crrrw, csrrs, ;w. sw] {
    csrrs: 0			_i: 0
    lw: 0		}
    sw: 0
** {csrrw,csrrs,ls,sw}: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x94: 0 lock+mode+x lock+na4+x
    ((pmpcfg0 >> 8) & 0x9A) == 0x92: 0 lock+mode+w lock+na4+w
    ((pmpcfg0 >> 8) & 0x99) == 0x91: 0 lock+mode+r lock+na4+r
**  ((pmpcfg0 >> 8) & (pmpLk+pmpModeMsk+{pmpX, pmpY, pmpR}) == (pmp{NA4,NAPOT,TOR}+pmp{X,W,R}):0

    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    #No exception in M Mode
    '(read_csr("mcause") != 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") != 0x00000001)': 0
**  '(read_csr("mcause") != {ld_flt, st_flt, inst_flt}': 0
    #No exception in S and U Mode
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000007)': 0 replace with {mmodeVal, umodeVal} {ld_flt, st_flt}
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001)': 0 replacw with umodeVal and inst_flt
**  '((mstatus & 0x1800 == {umodeVal, mmodeVal} and read_csr("mcause") != {ld,st}Fault': 0 
**  '((mstatus & 0x1800 ==  umodeVal            and read_csr("mcause") !=    instFault': 0 
  val_comb:
    #address should be in range of PMP
    '((pmpcfg0 >> 8) & 0x9F == 0x97) and (rs1_val + imm_val == (pmpaddr1 << 2))': 0 pmpLglMsk, loc+na4+rwx

pmp_NAPOT_RWX:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x9C: 0		lock+mode+x lock+napot+x
    ((pmpcfg0 >> 8) & 0x9A) == 0x9A: 0		lock+mode+w lock+napot+w
    ((pmpcfg0 >> 8) & 0x99) == 0x99: 0		lock+mode+r lock+napot+r

**  ((pmpcfg0 >> 8) & (pmpLckModeMsk +{pmpX, pmpW, pmpR}) == $1 :0

    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") != 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") != 0x00000001)': 0
**  '(read_csr("mcause") != {ld_flt, st_flt, inst_flt)': 0

    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001)': 0
**  '((mstatus & 0x1800 == {umodeVal, mmodeVal} and read_csr("mcause") != {ld,st}Fault': 0 
**  '((mstatus & 0x1800 ==  umodeVal            and read_csr("mcause") !=    instFault': 0 
  val_comb:
    '((pmpcfg0 >> 8) & 0x9F == 0x9F) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < ((((((pmpaddr1 << 2) | 3) + 1) | (((pmpaddr1 << 2) | 3))) + 1)))': 0

pmp_TOR_RWX:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 16) & 0x9C) == 0x8C: 0  lock+mode+x lock+na4+x
    ((pmpcfg0 >> 16) & 0x9A) == 0x8A: 0
    ((pmpcfg0 >> 16) & 0x99) == 0x89: 0
    ((pmpaddr2) >= 0x00000000) and ((pmpaddr2) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") != 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") != 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 16) & 0x9F == 0x8F) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < (pmpaddr2 << 2))': 0

pmp_NA4_RW:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x90: 0
    ((pmpcfg0 >> 8) & 0x9A) == 0x92: 0
    ((pmpcfg0 >> 8) & 0x99) == 0x91: 0                                              #No execute permissions
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") != 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") == 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 8) & 0x9F == 0x93) and (rs1_val + imm_val == (pmpaddr1 << 2))': 0

pmp_NAPOT_RW:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x98: 0
    ((pmpcfg0 >> 8) & 0x9A) == 0x9A: 0
    ((pmpcfg0 >> 8) & 0x99) == 0x99: 0
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") != 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") == 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 8) & 0x9F == 0x9B) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < ((((((pmpaddr1 << 2) | 3) + 1) | (((pmpaddr1 << 2) | 3))) + 1)))': 0
pmp_TOR_RW:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 16) & 0x9C) == 0x88: 0
    ((pmpcfg0 >> 16) & 0x9A) == 0x8A: 0
    ((pmpcfg0 >> 16) & 0x99) == 0x89: 0
    ((pmpaddr2) >= 0x00000000) and ((pmpaddr2) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") != 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") == 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 16) & 0x9F == 0x8B) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < (pmpaddr2 << 2))': 0

pmp_NA4_R:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x90: 0
    ((pmpcfg0 >> 8) & 0x9A) == 0x90: 0
    ((pmpcfg0 >> 8) & 0x99) == 0x91: 0                                              #No execute permissions
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") == 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") == 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 8) & 0x9F == 0x91) and (rs1_val + imm_val == (pmpaddr1 << 2))': 0
pmp_NAPOT_R:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x98: 0
    ((pmpcfg0 >> 8) & 0x9A) == 0x98: 0
    ((pmpcfg0 >> 8) & 0x99) == 0x99: 0
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") == 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") == 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 8) & 0x9F == 0x99) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < ((((((pmpaddr1 << 2) | 3) + 1) | (((pmpaddr1 << 2) | 3))) + 1)))': 0

pmp_TOR_R:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 16) & 0x9C) == 0x88: 0
    ((pmpcfg0 >> 16) & 0x9A) == 0x88: 0
    ((pmpcfg0 >> 16) & 0x99) == 0x89: 0
    ((pmpaddr2) >= 0x00000000) and ((pmpaddr2) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") == 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") == 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 16) & 0x9F == 0x89) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < (pmpaddr2 << 2))': 0

pmp_NA4_X:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x94: 0
    ((pmpcfg0 >> 8) & 0x9A) == 0x90: 0
    ((pmpcfg0 >> 8) & 0x99) == 0x90: 0                                              #No execute permissions
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") == 0x00000007)': 0
    '(read_csr("mcause") == 0x00000005)': 0
    '(read_csr("mcause") != 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 8) & 0x9F == 0x94) and (rs1_val + imm_val == (pmpaddr1 << 2))': 0

pmp_NAPOT_X:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x9C: 0
    ((pmpcfg0 >> 8) & 0x9A) == 0x98: 0
    ((pmpcfg0 >> 8) & 0x99) == 0x98: 0
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") == 0x00000007)': 0
    '(read_csr("mcause") == 0x00000005)': 0
    '(read_csr("mcause") != 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 8) & 0x9F == 0x9C) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < ((((((pmpaddr1 << 2) | 3) + 1) | (((pmpaddr1 << 2) | 3))) + 1)))': 0

pmp_TOR_X:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 16) & 0x9C) == 0x8C: 0
    ((pmpcfg0 >> 16) & 0x9A) == 0x88: 0
    ((pmpcfg0 >> 16) & 0x99) == 0x88: 0
    ((pmpaddr2) >= 0x00000000) and ((pmpaddr2) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") == 0x00000007)': 0
    '(read_csr("mcause") == 0x00000005)': 0
    '(read_csr("mcause") != 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 16) & 0x9F == 0x8C) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < (pmpaddr2 << 2))': 0

pmp_NA4_RX:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x94: 0
    ((pmpcfg0 >> 8) & 0x9A) == 0x90: 0
    ((pmpcfg0 >> 8) & 0x99) == 0x91: 0                                              #No execute permissions
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") == 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") != 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 8) & 0x9F == 0x95) and (rs1_val + imm_val == (pmpaddr1 << 2))': 0

pmp_NAPOT_RX:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 8) & 0x9C) == 0x9C: 0
    ((pmpcfg0 >> 8) & 0x9A) == 0x98: 0
    ((pmpcfg0 >> 8) & 0x99) == 0x99: 0
    ((pmpaddr1) >= 0x00000000) and ((pmpaddr1) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") == 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") != 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 8) & 0x9F == 0x9D) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < ((((((pmpaddr1 << 2) | 3) + 1) | (((pmpaddr1 << 2) | 3))) + 1)))': 0

pmp_TOR_RX:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*);  def rvtest_mtrap_routine=True;
  mnemonics:
    csrrw: 0
    csrrs: 0
    lw: 0
    sw: 0
  csr_comb:
    ((pmpcfg0 >> 16) & 0x9C) == 0x8C: 0
    ((pmpcfg0 >> 16) & 0x9A) == 0x88: 0
    ((pmpcfg0 >> 16) & 0x99) == 0x89: 0
    ((pmpaddr2) >= 0x00000000) and ((pmpaddr2) <= 0xFFFFFFFF): 0
    '(read_csr("mcause") == 0x00000007)': 0
    '(read_csr("mcause") != 0x00000005)': 0
    '(read_csr("mcause") != 0x00000001)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x800) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") == 0x00000007)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000005)': 0
    '((mstatus & 0x1800 == 0x000) and read_csr("mcause") != 0x00000001)': 0
  val_comb:
    '((pmpcfg0 >> 16) & 0x9F == 0x8D) and (rs1_val + imm_val >= (pmpaddr1 << 2)) and (rs1_val + imm_val < (pmpaddr2 << 2))': 0